import{_ as s,c as e,a5 as i,o as t}from"./chunks/framework.KBT3hDmv.js";const d=JSON.parse('{"title":"Kerchunk","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),r={name:"index.md"};function n(l,a,h,p,k,o){return t(),e("div",null,a[0]||(a[0]=[i(`<h1 id="kerchunk" tabindex="-1">Kerchunk <a class="header-anchor" href="#kerchunk" aria-label="Permalink to &quot;Kerchunk&quot;">​</a></h1><p>Kerchunk.jl is a Julia package that enables loading <a href="https://fsspec.github.io/kerchunk/" target="_blank" rel="noreferrer">Kerchunk reference catalogs</a> as <a href="https://github.com/JuliaIO/Zarr.jl" target="_blank" rel="noreferrer">Zarr.jl</a> arrays.</p><h2 id="Quick-start" tabindex="-1">Quick start <a class="header-anchor" href="#Quick-start" aria-label="Permalink to &quot;Quick start {#Quick-start}&quot;">​</a></h2><p>Kerchunk.jl is simply a storage backend to <a href="https://github.com/JuliaIO/Zarr.jl" target="_blank" rel="noreferrer"><code>Zarr.jl</code></a>. Zarr does integrate with the more fully featured packages <a href="https://github.com/rafaqz/Rasters.jl" target="_blank" rel="noreferrer"><code>Rasters.jl</code></a> and <a href="https://github.com/JuliaDataCubes/YAXArrays.jl" target="_blank" rel="noreferrer"><code>YAXArrays.jl</code></a>, which are the packages you will want to use to interact with Kerchunk data.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Kerchunk, Zarr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">za </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Zarr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zopen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;reference://path/to/kerchunk/catalog.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and treat it like any other Zarr array!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># You can even wrap it in YAXArrays.jl to get DimensionalData.jl accessors:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> YAXArrays</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">YAXArrays</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">open_dataset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(za)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or open it as a Rasters.RasterStack:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RasterStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;reference://catalog.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Zarrsource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lazy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># need to include this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># source must be explicit</span></span></code></pre></div><p>It&#39;s most useful to open Kerchunk datasets as either RasterStacks or YAXArrays datasets, since both of those packages have great dimensionality support.</p><h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-label="Permalink to &quot;Background&quot;">​</a></h2><p><a href="https://fsspec.github.io/kerchunk/" target="_blank" rel="noreferrer"><code>kerchunk</code></a> is a Python package that generates the reference catalogs.</p><h2 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;Limitations&quot;">​</a></h2><ul><li><p>No support for <code>gen</code> references with templates.</p></li><li><p>No support for complex Jinja2 templates in <code>refs</code>. (Although Kerchunk hardly supports this either...)</p></li></ul><h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to &quot;Acknowledgements&quot;">​</a></h2><p>This effort was funded by the NASA MEaSUREs program in contribution to the Inter-mission Time Series of Land Ice Velocity and Elevation (ITS_LIVE) project (<a href="https://its-live.jpl.nasa.gov/" target="_blank" rel="noreferrer">https://its-live.jpl.nasa.gov/</a>).</p><h2 id="Alternatives-and-related-packages" tabindex="-1">Alternatives and related packages <a class="header-anchor" href="#Alternatives-and-related-packages" aria-label="Permalink to &quot;Alternatives and related packages {#Alternatives-and-related-packages}&quot;">​</a></h2><ul><li><p>You can always use Python&#39;s <code>xarray</code> directly via PythonCall.jl</p></li><li><p><a href="https://github.com/asinghvi17/FSSpec.jl" target="_blank" rel="noreferrer">FSSpec.jl</a> is an alternative storage backends for Zarr.jl that wraps the same <a href="https://github.com/fsspec/filesystem_spec" target="_blank" rel="noreferrer"><code>fsspec</code></a> that <code>xarray</code> uses under the hood.</p></li></ul><p>This package is of course built on top of <a href="https://github.com/JuliaIO/Zarr.jl" target="_blank" rel="noreferrer">Zarr.jl</a>, which is a pure-Julia Zarr array library. <a href="https://github.com/JuliaDataCubes/YAXArrays.jl" target="_blank" rel="noreferrer">YAXArrays.jl</a> is a Julia package that can wrap Zarr arrays in a DimensionalData-compatible interface.</p>`,15)]))}const g=s(r,[["render",n]]);export{d as __pageData,g as default};
