import{_ as s,c as e,a5 as i,o as t}from"./chunks/framework.KBT3hDmv.js";const k=JSON.parse('{"title":"What is Kerchunk?","description":"","frontmatter":{},"headers":[],"relativePath":"what_the_heck.md","filePath":"what_the_heck.md","lastUpdated":null}'),n={name:"what_the_heck.md"};function r(o,a,l,h,p,c){return t(),e("div",null,a[0]||(a[0]=[i(`<h1 id="What-is-Kerchunk?" tabindex="-1">What is Kerchunk? <a class="header-anchor" href="#What-is-Kerchunk?" aria-label="Permalink to &quot;What is Kerchunk? {#What-is-Kerchunk?}&quot;">​</a></h1><p>Kerchunk is a powerful tool designed to optimize access to large scientific datasets, particularly those stored in cloud-based object stores. It addresses the challenges of working with numerous small files or large, chunked files by creating a unified, efficient interface for data access.</p><p>At its core, Kerchunk works by creating a &quot;fake&quot; file system that maps to a Zarr store. The file system describes a mapping from Zarr chunks to byte ranges of the source files.</p><p>This approach allows Kerchunk to effectively wrap one or many data files into a single Zarr array, providing a consolidated view of the data. By doing so, it enables faster data access, reduces the number of API calls needed to retrieve information (by essentially front-loading the process), and greatly simplifies the process of working with multi-file datasets.</p><h2 id="Available-data-sources" tabindex="-1">Available data sources <a class="header-anchor" href="#Available-data-sources" aria-label="Permalink to &quot;Available data sources {#Available-data-sources}&quot;">​</a></h2><p>The unit of Kerchunking is the <em>catalog</em>. Each catalog is either a single JSON file or a directory of Parquet files. The catalog is essentially a dictionary of file paths mapped to byte ranges.</p><p>Catalogs are &quot;sidecar&quot; files, and may not always be present with the original data. Generally, at least for now, if there&#39;s no obvious Kerchunk file you would have to generate one yourself, using Python. Julia support for constructing catalogs is currently nonexistent, but it&#39;s on the bucket list!</p><h2 id="Tips-and-tricks" tabindex="-1">Tips and tricks <a class="header-anchor" href="#Tips-and-tricks" aria-label="Permalink to &quot;Tips and tricks {#Tips-and-tricks}&quot;">​</a></h2><h3 id="Where&#39;s-my-CRS?" tabindex="-1">Where&#39;s my CRS? <a class="header-anchor" href="#Where&#39;s-my-CRS?" aria-label="Permalink to &quot;Where&amp;#39;s my CRS? {#Where&#39;s-my-CRS?}&quot;">​</a></h3><p>That&#39;s an interesting question. Over the short term, Julia doesn&#39;t have support for CF-style (climate-and-forecast conventions) CRS metadata. Additionally, CRS from e.g NetCDF files are stored as empty variables, which Kerchunk removes.</p><p>There are two places you might look for CRS information.</p><ul><li><p>First, see if the global metadata contains a <code>crs_wkt</code> or <code>spatial_ref</code> field. If so, you can use that. Other potential keys to look for are <code>proj4string</code>, <code>proj4text</code>, or <code>spatial_epsg</code>.</p></li><li><p>Second, you might find a <code>grid_mapping</code> metadata field in a layer / Zarr group, which will contain a link to the CRS. If the value of that <code>grid_mapping</code> field is also a key in the global metadata, then that will contain the CRS.</p></li></ul><p>If you&#39;re using <code>Rasters.jl</code> to load the data, you can set the CRS on a <code>Raster</code> or <code>RasterStack</code> like this:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ras </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setcrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ras, new_crs)</span></span></code></pre></div><p>and if you have a WKT string, for example, you can construct <code>new_crs</code> like this:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_crs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ESRIWellKnownText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wkt_string)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_crs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EPSG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(epsg_code)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_crs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ProjString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(proj4_string)</span></span></code></pre></div><h3 id="S3-redirect-errors" tabindex="-1">S3 redirect errors <a class="header-anchor" href="#S3-redirect-errors" aria-label="Permalink to &quot;S3 redirect errors {#S3-redirect-errors}&quot;">​</a></h3><p>Many S3 buckets are restricted to only allow access from certain regions. If you get an error like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nested task error: AWS.AWSExceptions.AWSException: PermanentRedirect -- The bucket you are attempting to access must be addressed using the specified endpoint. Please send all future requests to this endpoint.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>HTTP.Exceptions.StatusError(301, &quot;GET&quot;, &quot;/its-live-data/velocity_image_pair/landsatOLI/v02/N70W040/LC08_L1GT_004010_20140206_20200912_02_T2_X_LC08_L1GT_004010_20140529_20200911_02_T2_G0120V02_P008.nc&quot;, HTTP.Messages.Response:</span></span>
<span class="line"><span>&quot;&quot;&quot;</span></span>
<span class="line"><span>HTTP/1.1 301 Moved Permanently</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>then you can set your AWS config to say you&#39;re coming from a different region, like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import AWS</span></span>
<span class="line"><span>AWS.global_aws_config(AWS.AWSConfig(; region=&quot;us-west-2&quot;))</span></span></code></pre></div><h3 id="Version-mismatches" tabindex="-1">Version mismatches <a class="header-anchor" href="#Version-mismatches" aria-label="Permalink to &quot;Version mismatches {#Version-mismatches}&quot;">​</a></h3><p>Python and Julia load different versions of libraries, which can cause incompatibilities. For example, both NCDatasets.jl and Python&#39;s netcdf4 library depend on libhdf5, but the versions they try to load are incompatible.</p>`,23)]))}const u=s(n,[["render",r]]);export{k as __pageData,u as default};
